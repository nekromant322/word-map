import {addNewWord, deleteWord, findWord, getWordsJson, updateWord} from "./api/dictionary-api.js";
import {checkAccessByRule, checkAuthorization, parseJwt, redirectToLogin} from "./util/jwt.js";
import {ALL_RULES} from "./util/rules.js";
import {redirectToMenu} from "./util/redirect.js";

document.addEventListener("DOMContentLoaded", async () => {
    await checkAuthorization();

    const hasAccess = checkAccessByRule(ALL_RULES.MANAGE_DICTIONARY);
    if (!hasAccess) {
        redirectToMenu();
    }

    const exportBtn = document.getElementById("export-btn");
    const addForm = document.getElementById("add-word-form");
    const updateForm = document.getElementById("update-word-form");
    const searchBtn = document.getElementById("searchBtn");
    const searchInput = document.getElementById("searchInput");
    const searchResult = document.getElementById("searchResult");

    // –í–´–ì–†–£–ó–ö–ê –°–õ–û–í
    exportBtn.addEventListener("click", async () => {
        exportBtn.disabled = true;
        exportBtn.textContent = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...";

        try {
            const response = await getWordsJson();

            console.log(response)
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤");

            const blob = await response.blob();
            const link = document.createElement("a");
            link.href = window.URL.createObjectURL(blob);
            link.download = "dictionary.json";
            link.click();
        } catch (error) {
            console.log(error.message)
            alert("–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è");
        } finally {
            exportBtn.disabled = false;
            exportBtn.textContent = "üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å";
        }
    });

    // –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í–ê
    addForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const word = document.getElementById("add-word-word-input").value.trim();
        const description = document.getElementById("add-word-word-input").value.trim();

        if (!word || !description) return;

        try {
            const response = await addNewWord(word, description);

            if (response.status === 400) {
                alert("–°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            } else if (!response.ok) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ");
            } else {
                alert("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ");
                addForm.reset();
            }
        } catch (err) {
            alert(err.message);
        }
    });

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    updateForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const id = document.getElementById("update-word-id-input").value.trim();
        const word = document.getElementById("update-word-word-input").value.trim();
        const description = document.getElementById("update-word-description-input").value.trim();

        if (!id || !word || !description) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
            return;
        }

        try {
            const response = await updateWord(id, word, description);

            if (response.status === 404) {
                alert("–°–ª–æ–≤–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            } else if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞");
            } else {
                alert("–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                updateForm.reset();
                const modal = document.getElementById("updateWordModal");
                modal.hide();
            }
        } catch (err) {
            alert("–û—à–∏–±–∫–∞: " + err.message);
        }
    });

    searchBtn.addEventListener("click", async () => {
        const query = searchInput.value.trim();
        if (!query) {
            alert("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞");
            return;
        }

        try {
            const response = await findWord(query);

            if (response.status === 404) {
                searchResult.textContent = "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
                return;
            }

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞");

            const word = await response.json();
            searchResult.innerHTML = `
            <strong>Id:</strong> ${word.id} <br/>
            <strong>–°–ª–æ–≤–æ:</strong> ${word.word} <br/>
            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${word.description} <br/>
            <button id="deleteWordBtn" class="btn btn-danger mt-2">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ</button>
        `;

            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –∫ –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –∫–Ω–æ–ø–∫–µ
            document.getElementById("deleteWordBtn").addEventListener("click", async () => {
                if (!confirm("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?")) return;

                try {
                    const deleteResponse = await deleteWord(word.id); // –∏—Å–ø–æ–ª—å–∑—É–µ–º ID

                    if (deleteResponse.status === 404) {
                        alert("–°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ");
                    } else if (!deleteResponse.ok) {
                        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
                    } else {
                        searchResult.textContent = "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.";
                    }
                } catch (error) {
                    alert("–û—à–∏–±–∫–∞: " + error.message);
                }
            });

        } catch (error) {
            alert("–û—à–∏–±–∫–∞: " + error.message);
        }
    });
});
